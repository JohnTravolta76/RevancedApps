name: Daily 5am

on:
  schedule:
    # Cover both DST states; gate ensures only 05:00 local proceeds
    - cron: '0 18 * * *'  # 05:00 AEDT (UTC+11)
    - cron: '0 19 * * *'  # 05:00 AEST (UTC+10)
  workflow_dispatch:

concurrency:
  group: daily-5am-sydney
  cancel-in-progress: false

jobs:
  gate:
    runs-on: ubuntu-latest
    outputs:
      run: ${{ steps.gate.outputs.run }}
    steps:
      - name: Gate to only run at 05:00 Australia/Sydney (or always for manual)
        id: gate
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual dispatch - allowing run"
            echo "run=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          export TZ=Australia/Sydney
          NOW_HOUR="$(date +%H)"
          NOW_MINUTE="$(date +%M)"
          echo "Local time in Australia/Sydney: ${NOW_HOUR}:${NOW_MINUTE}"
          
          # Check if it's the 5 AM hour  
          if [ "$NOW_HOUR" = "05" ]; then  
            echo "Current time is within the 5 AM hour; allowing run."  
            echo "run=true" >> $GITHUB_OUTPUT  
          else  
            echo "Current time is outside the 5 AM hour; skipping."  
            echo "run=false" >> $GITHUB_OUTPUT  
          fi

  check-updates:
    needs: gate
    if: needs.gate.outputs.run == 'true'
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.decide.outputs.proceed }}
      next_ver_code: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
    steps:
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Load last-built versions.json from update branch (if present)
        id: last
        run: |
          set -e
          git fetch origin update:update || true
          if git show update:versions.json >/dev/null 2>&1; then
            git show update:versions.json > last_versions.json
            echo "found_json=true" >> $GITHUB_OUTPUT
          else
            echo "found_json=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate latest.json via build.sh --print-latest
        id: latest
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # Ensure jq is available for comparison
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          
          # Call build.sh with --print-latest flag to get machine-readable JSON
          ./build.sh --print-latest > latest.json
          
          echo "Latest snapshot:"
          cat latest.json

      - name: Decide whether to proceed (strict compare)
        id: decide
        run: |
          set -e
          # Always proceed for manual runs
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual run â€” proceeding."
            echo "proceed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Proceed if we don't have a previous versions.json
          if [ "${{ steps.last.outputs.found_json }}" != "true" ]; then
            echo "No previous versions.json found; proceeding."
            echo "proceed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Normalize both JSONs and compare without using --argfile/--slurpfile
          jq '
            def norm(x): if x == null then "" else x end;
            {
              apps: {
                GooglePhotos: {
                  "arm64-v8a": norm(.apps.GooglePhotos["arm64-v8a"]),
                  "arm-v7a":   norm(.apps.GooglePhotos["arm-v7a"])
                },
                "Music-Extended": {
                  "arm64-v8a": norm(.apps["Music-Extended"]["arm64-v8a"]),
                  "arm-v7a":   norm(.apps["Music-Extended"]["arm-v7a"])
                },
                YouTube: norm(.apps.YouTube)
              },
              cli: {
                revanced: norm(.cli.revanced),
                inotia00: norm(.cli.inotia00)
              },
              patches: {
                revanced: norm(.patches.revanced),
                inotia00: norm(.patches.inotia00)
              }
            }
          ' last_versions.json > norm_last.json

          jq '
            def norm(x): if x == null then "" else x end;
            {
              apps: {
                GooglePhotos: {
                  "arm64-v8a": norm(.apps.GooglePhotos["arm64-v8a"]),
                  "arm-v7a":   norm(.apps.GooglePhotos["arm-v7a"])
                },
                "Music-Extended": {
                  "arm64-v8a": norm(.apps["Music-Extended"]["arm64-v8a"]),
                  "arm-v7a":   norm(.apps["Music-Extended"]["arm-v7a"])
                },
                YouTube: norm(.apps.YouTube)
              },
              cli: {
                revanced: norm(.cli.revanced),
                inotia00: norm(.cli.inotia00)
              },
              patches: {
                revanced: norm(.patches.revanced),
                inotia00: norm(.patches.inotia00)
              }
            }
          ' latest.json > norm_latest.json

          if diff -u norm_last.json norm_latest.json >/dev/null; then
            echo "No differences; skipping build."
            echo "proceed=false" >> $GITHUB_OUTPUT
          else
            echo "Detected differences from last build:"
            diff -u norm_last.json norm_latest.json || true
            echo "proceed=true" >> $GITHUB_OUTPUT
          fi

      - name: Get next version code (for reuse)
        id: next_ver_code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

  run-build:
    needs: [gate, check-updates]
    if: needs.check-updates.outputs.proceed == 'true'
    permissions: write-all
    uses: ./.github/workflows/build.yml
    with:
      from_ci: true
      notify_telegram: true
